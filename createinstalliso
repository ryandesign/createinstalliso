#!/bin/bash

# Copyright (c) 2020 Ryan Schmidt
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.
#
# Creates an ISO file from a macOS Install app or InstallESD.dmg, especially
# for use with VMware.

set -euxo pipefail

scriptname="${0##*/}"

usage() {
    printf "usage: %s [ Install macOS XXX.app | InstallESD.dmg ]\n" "$scriptname"
    exit
}

err() {
    local errmsg="$1"
    local exitcode="${2-1}"
    printf "%s: %s\n" "$scriptname" "$errmsg" 1>&2
    exit "$exitcode"
}

# vercomp by Paused until further notice
# https://stackoverflow.com/questions/4023830/how-to-compare-two-strings-in-dot-separated-version-format-in-bash
vercomp() {
    if [[ $1 == $2 ]]; then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++)); do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++)); do
        if [[ -z ${ver2[i]} ]]; then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]})); then
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]})); then
            return 2
        fi
    done
    return 0
}

versiontest() {
    vercomp "$1" "$3"
    case $? in
        0) op="=";;
        1) op=">";;
        2) op="<";;
    esac
    [ "$op" == "$2" ]
}

[ $# -gt 0 ] || usage

if [ "${1##*.}" = "dmg" ]; then
    esddmg="$1"
else
    esddmg="$1"/Contents/SharedSupport/InstallESD.dmg
fi

[ -f "$esddmg" ] || usage

command -v unbuffer > /dev/null || err "unbuffer is required. You can install it with MacPorts: sudo port install expect"

command -v rsync > /dev/null || err "rsync is required. You can install it with MacPorts: sudo port install rsync"

rsyncversion=$(rsync --version | sed -En '1s/^rsync  version ([^ ]+).*$/\1/p')
versiontest "$rsyncversion" "<" "3.1.0" && err "rsync 3.1.0 or later is required. You can install it with MacPorts: sudo port install rsync"

#[ "$(id -u)" = "0" ] || exec sudo "$0" "$@"

: "${TMPDIR=/tmp}"

plistbuddy=/usr/libexec/PlistBuddy

cleanup() {
    echo "$lastprog Cleaning up"

    [ -d "$tmpmount" ] && hdiutil detach "$tmpmount"
    [ -d "$basemount" ] && hdiutil detach "$basemount"
    [ -d "$esdmount" ] && hdiutil detach "$esdmount"

#    rm -rf "$build"
}

trap 'cleanup' EXIT

lastprog=0
builddir=$(mktemp -d "$TMPDIR/$scriptname".XXXXXX)
esdmount="$builddir"/esd
basemount="$builddir"/basesystem
tmpmount="$builddir"/tmp
tmpdmg="$builddir"/tmp.sparsebundle
tmpplist="$builddir"/tmp.plist

prog() {
    local msg="$1"
    local newmin="$2"
    local newmax="$3"
    local oldmax="${4-100}"
    #echo "$newmin $msg"
    while IFS= read -r percent; do
        printf "%.4f %s\n" "$percent" "$msg"
    done
}

hdiutil attach "$esddmg" -mountpoint "$esdmount" -nobrowse -puppetstrings -readonly | unbuffer -p sed -En 's/^PERCENT:([0-9.]+).*$/\1/p' | prog "Mounting ESD image" 0 10

if [ -f "$esdmount"/boot.efi ]; then
    systemdmg="$esddmg"
    systemmount="$esdmount"
    tmpdmgsize=0
    copymore=no
else
    echo "$lastprog Mounting base system image"
    systemdmg="$esdmount"/BaseSystem.dmg
    systemmount="$basemount"
    hdiutil attach "$systemdmg" -mountpoint "$basemount" -nobrowse -puppetstrings -readonly | unbuffer -p sed -En 's/^PERCENT:([0-9.]+).*$/\1/p' | prog "Mounting base system image" 10 20
    tmpdmgsize=$(du -cks "$esdmount"/{BaseSystem.*,Packages} | tail -n1 | cut -d$'\t' -f1)
    copymore=yes
fi

diskutil info -plist "$systemmount" > "$tmpplist"
systemsize=$("$plistbuddy" "$tmpplist" -c "Print :Size")
systemfree=$("$plistbuddy" "$tmpplist" -c "Print :FreeSpace")
tmpdmgsize=$((tmpdmgsize + (systemsize - systemfree) / 1024 + 512))

echo "$lastprog Creating temporary image"
hdiutil create -o "$tmpdmg" -size "$tmpdmgsize"k -layout ISOCD -fs HFS+J -puppetstrings
hdiutil attach "$tmpdmg" -mountpoint "$tmpmount" -nobrowse -noverify -plist > "$tmpplist"
n=0
while
    tmpdev=$("$plistbuddy" "$tmpplist" -c "Print :system-entities:$n:dev-entry")
    mount=$("$plistbuddy" "$tmpplist" -c "Print :system-entities:$n:mount-point" 2>/dev/null || true)
    [ "$mount" != "$tmpmount" ]
do
    n=$((n + 1))
done

echo "$lastprog Copying system image"
asr restore --erase --noprompt --puppetstrings --source "$systemdmg" --target "$tmpmount"
# | unbuffer -p awk '/PINF/ {if ($2<last) {add=100; msg="Verifying"} print $2+add,msg; last=$2; msg=""}'

systemversionplist="$systemmount"/System/Library/CoreServices/SystemVersion.plist
osversion=$("$plistbuddy" "$systemversionplist" -c 'Print :ProductVersion')
osbuild=$("$plistbuddy" "$systemversionplist" -c 'Print :ProductBuildVersion')
appdisplayname=$("$plistbuddy" "$systemmount/Install "*.app/Contents/Info.plist -c 'Print :CFBundleDisplayName')
installername="$appdisplayname $osversion $osbuild"

diskutil rename "$tmpdev" "$installername"
tmpmount="/Volumes/$installername"

if [ "$copymore" = "yes" ]; then
    echo "$lastprog Copying packages and base system"
    rsync -a --info=progress2 "$esdmount"/ --include='BaseSystem.*' --include='Packages/***' --exclude='*' "$tmpmount" | unbuffer -p tr '\r' '\n' | sed -En 's/^ *[^ ]+ +([0-9]+).*$/\1/p'
    rm "$tmpmount"/System/Installation/Packages
    mv "$tmpmount"/Packages "$tmpmount"/System/Installation/
fi

find "$tmpmount" -depth 1 \! -name "$appdisplayname".app -print0 | xargs -0 chflags -h hidden
